% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/events_avertable_by_increasing_coverage.R,
%   R/events_averted_by_vaccination.R, R/number_needed_to_vaccinate.R
\name{compute_VC_alpha}
\alias{compute_VC_alpha}
\alias{compute_events_avertable_by_increasing_coverage}
\alias{compute_events_avertable_by_increasing_coverage_many_alphas}
\alias{compute_events_averted_by_vaccination}
\alias{compute_number_needed_to_vaccinate}
\title{Compute vaccine coverage for a given value of alpha
(percent of increase in final vaccine coverage)}
\usage{
compute_VC_alpha(diff_cumulative_coverage, target_coverage, alpha)

compute_events_avertable_by_increasing_coverage(
  events,
  diff_cumulative_coverage,
  target_coverage,
  alpha,
  vaccine_effectiveness
)

compute_events_avertable_by_increasing_coverage_many_alphas(
  events,
  diff_cumulative_coverage,
  target_coverage,
  alphas,
  vaccine_effectiveness
)

compute_events_averted_by_vaccination(
  events,
  cumulative_coverage,
  vaccine_effectiveness
)

compute_number_needed_to_vaccinate(
  events,
  events_averted,
  pop_at_risk,
  vaccine_effectiveness
)
}
\arguments{
\item{diff_cumulative_coverage}{Vector of difference in cumulative coverage
(cumulative_coverage_t - cumulative_coverage_t-1)}

\item{target_coverage}{Target coverage (maximum coverage)}

\item{alpha}{percent of increase in final vaccine coverage}

\item{events}{Vector of number of events}

\item{vaccine_effectiveness}{Vector of vaccine effectiveness}

\item{alphas}{Vector of alpha values}

\item{cumulative_coverage}{Vector of cumulative coverage}

\item{events_averted}{Vector of number of events averted}

\item{pop_at_risk}{Population at risk}
}
\value{
The vaccine coverage

The number of events averted

A data frame with the alpha values and the events averted

The number of events averted

The number of individuals needed to vaccinate to avert
one event
}
\description{
Compute vaccine coverage for a given value of alpha
(percent of increase in final vaccine coverage)

Compute events averted by increasing the coverage to a given value of alpha
(percent of increase in final vaccine coverage)

Compute events averted by increasing the coverage to many values of alpha

Compute events averted by vaccination

Compute the number of individuals needed to vaccinate to prevent
one event
}
\examples{
diff_cumulative_coverage <- c(0, diff(coverage_and_incidence_mock_data$coverage_data$
cumulative_coverage))
target_coverage <- max(coverage_and_incidence_mock_data$coverage_data$
cumulative_coverage)
alpha <- 0.1
compute_VC_alpha(diff_cumulative_coverage, target_coverage, alpha)
events <- coverage_and_incidence_mock_data$incidence_data$events
diff_cumulative_coverage <- c(0, diff(coverage_and_incidence_mock_data$coverage_data$
cumulative_coverage))
target_coverage <- max(coverage_and_incidence_mock_data$coverage_data$
cumulative_coverage)
alpha <- 0.1
vaccine_effectiveness <- ve_mock_data$ve
compute_events_avertable_by_increasing_coverage(events, diff_cumulative_coverage,
target_coverage, alpha, vaccine_effectiveness)
events <- coverage_and_incidence_mock_data$incidence_data$events
diff_cumulative_coverage <- c(0, diff(coverage_and_incidence_mock_data$coverage_data$
cumulative_coverage))
target_coverage <- max(coverage_and_incidence_mock_data$coverage_data$
cumulative_coverage)
alphas <- c(0.1, 0.2, 0.3)
vaccine_effectiveness <- ve_mock_data$ve
compute_events_avertable_by_increasing_coverage_many_alphas(events, diff_cumulative_coverage,
target_coverage, alphas, vaccine_effectiveness)
compute_events_averted_by_vaccination(events = 100, cumulative_coverage = 0.5,
vaccine_effectiveness = 0.5)
data("coverage_and_incidence_mock_data")
data("ve_mock_data")
events <- coverage_and_incidence_mock_data$incidence_data$events
cumulative_coverage <- coverage_and_incidence_mock_data$coverage_data$cumulative_coverage
vaccine_effectiveness <- ve_mock_data$ve
compute_events_averted_by_vaccination(events, cumulative_coverage, vaccine_effectiveness)
events <- coverage_and_incidence_mock_data$incidence_data$events
cumulative_coverage <- coverage_and_incidence_mock_data$coverage_data$cumulative_coverage
events_averted <- compute_events_averted_by_vaccination(events,
cumulative_coverage, vaccine_effectiveness)
pop_at_risk <- 1000
vaccine_effectiveness <- ve_mock_data$ve
compute_number_needed_to_vaccinate(events, events_averted, pop_at_risk, vaccine_effectiveness)
}
